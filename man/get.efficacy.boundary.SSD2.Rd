% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/get.efficacy.boundary.SSD2.R
\name{get.efficacy.boundary.SSD2}
\alias{get.efficacy.boundary.SSD2}
\title{Estimate Efficacy Bounary}
\usage{
get.efficacy.boundary.SSD2(seed = 12123, TI.target, Time.Delay, rand.vec,
  Prior, stopping, Arrival, Successes, Outcomes, n.itr, p.A = NULL,
  p.0 = NULL)
}
\arguments{
\item{seed}{Set a seed}

\item{TI.target}{Type one error bound}

\item{Time.Delay}{Time between treatment initiation and measurement of response outcome.}

\item{rand.vec}{A list of randomization parameter to  compute the power function \eqn{h_{d,m}(N) = a_{d,m} N^b }. The elements are:
(1) \code{a} array of identical slopes for each experimental agents by disease and subpolulation.
(2) \code{b} The exponent \eqn{b}.
(3) \code{c} The exponent for the control arms.
(4) \code{N.star} The minimum number of patients to be randomized to each combination of arm/disease/subpopulation.}

\item{Prior}{A list of prior parameter generated with \code{Prior.list.Fct}.}

\item{stopping}{A list with names eleents \code{b.futil, shape.futi, b.effic, shape1.effic, shape2.effic, N.min}, where:
(1) \code{b.futil} is either a scalar of an array of stopping parameter for the futility boundary with shape parameter \code{shape.futi}
\code{b.futil * (1-shape.futi^N )} with  \code{N = Resp_RiskPop[d,a,m] } or   \code{N = sum(Resp_RiskPop[,a,m]) } for the SSD or SFD.
(2) \code{b.effic} is an array of stopping parameter for the efficacy boundary  \code{b.effic[d,m,a] * (1+shape1.effic * shape1.effic^N )}.
(3) N.min is the  minimum number of observed outcomes before the early stopping rule for efficacy can be applied.}

\item{Arrival}{A list of  arrival matrices usually generated with \code{arrival_process}, which 3 columns.
The 1th, 2th and 3th column indicate for each patients (one row par patient) the
arrival time, disease type and the subpopulation.}

\item{Successes}{A matrix of observed positive outcomes (rows represent diseases and columns agents).}

\item{Outcomes}{A matrix of observed outcomes (rows represent diseases and columns agents).}

\item{n.itr}{Vector of number of trials that should be generated per iteration}

\item{p.A}{Matrix of alternative probabilityies, for hypothesis testing of the form simple versus simple}

\item{p.0}{Matrix of null probabilityies, for hypothesis testing of the form simple versus simple}

\item{n.da}{Vector of length 2 that indicates the number of disease and the number of experimental agents}
}
\description{
Estimate the efficacy boundary for the SSD
}
\examples{
### Step 1: Simlate a trial

#############################
## get arrival data
#############################
arr.rates  = c(2.3, 1.3, 0.7, 0.4, 0.3)
Arrival    = arrival.process(
               nr.datasets        = 1,
               seed               = 121,
               rates.by.disease   = arr.rates,
               mutants.by.disease = rep(240,5))

#############################
## get potential outcome data
#############################
rate       = matrix(c(0,.2,0,0)+.3, 5,4, byrow=TRUE)
rate[2,2]  = .3
Outcome    = get.outcome(seed=123, rate, Arrival)

#############################
## simulat the trial
#############################
rand.vec   = list(a = (1/120)^4, b=4, c=5, N.star=35)
Time.Delay = 8
Prior      = Prior.list.Fct(
              eligibility.array = matrix(1,5,4),
              Var.vec           = c(0,.8,0,.1,.05))

stopping   = list(b.futil      = 0.05,
                  b.effic      = 2,
                  shape.futi   = 0,
                  shape1.effic = 3.5,
                  shape2.effic = 0.85,
                  N.min        = 30)

Check      = c(Drop        = TRUE,
               alloc       = FALSE,
               resp.pr     = FALSE,
               stat        = FALSE,
               stat.all    = FALSE,
               sim.initial = TRUE)

Trials     = Simulate.trial(
    seed            = 12123,
     ArrivalData    = Arrival,
     ResponseData   = Outcome,
     Time.Delay     = Time.Delay,
     Design         = c(2, 1),
     Prior          = Prior,
     p.historical   = NULL,
     rand.vec       = rand.vec,
     stopping.rules = stopping,
     Check          = Check,
     DAM.check      = c(d, a, 1))

#############################
## get bounary
#############################
Successes  = Trials[[1]]$Resp_Events[,,1]
Outcomes   = Trials[[1]]$Resp_RiskPop[,,1]
n.itr      = c(10,10,10)
TI.target  = 0.1

Arrival    = arrival.process(
               nr.datasets        = max(n.itr),
               seed               = 121,
               rates.by.disease   = arr.rates,
               mutants.by.disease = rep(240,5))

Boundary = get.efficacy.boundary.SSD2(
            TI.target  = TI.target,
            Time.Delay = Time.Delay,
            rand.vec   = rand.vec,
            Prior      = Prior,
            stopping   = stopping,
            Arrival    = Arrival,
            Successes  = Successes,
            Outcomes   = Outcomes,
            n.itr      = n.itr)
}

